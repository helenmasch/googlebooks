{"version":3,"sources":["logo.svg","Utils/api.js","components/Thumbnail/index.js","components/Grid/index.js","components/Booklist/index.js","components/Button/index.js","components/Input/index.js","pages/search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","title","apiKey","url","axios","get","Thumbnail","src","className","role","aria-label","style","backgroundImage","Container","fluid","children","Row","Col","size","split","map","join","BookList","BookListItem","authors","href","description","thumbnail","rel","target","Button","type","onClick","Input","props","Search","state","apiResults","search","process","handleInputChange","event","name","value","setState","handleFormSubmit","preventDefault","api","then","res","searchBooks","i","data","items","length","push","volumeInfo","image","imageLinks","link","infoLink","catch","err","console","log","this","onChange","placeholder","book","index","key","Component","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c8caa81f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\"\n\nexport default {\n    getGooglebooks: function(title, apiKey){\n        let url = \"https://www.googleapis.com/books/v1/volumes?q=\" + title + \"&printType=Books&key=\" + apiKey;\n        return axios.get(url);\n    }\n\n}","import React from \"react\";\nimport \"./style.css\";\n\n// The Thumbnail component renders a div that uses some CSS to render a background image\n// It will always keep square proportions at any size without the image warping\n// The \"role\" and \"aria label\" are there to identify the element's purpose as an image for accessibility purposes\nfunction Thumbnail({ src }) {\n  return (\n    <div\n      className=\"thumbnail\"\n      role=\"img\"\n      aria-label=\"Recipe Image\"\n      style={{\n        backgroundImage: `url(${src})`\n      }}\n    />\n  );\n}\n\nexport default Thumbnail;\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Thumbnail from \"../Thumbnail\";\nimport { Container, Row, Col } from \"../Grid\";\n\n// Exporting both RecipeList and RecipeListItem from this file\n\n// RecipeList renders a bootstrap list item\nexport function BookList({ children }) {\n  return <ul className=\"list-group\">{children}</ul>;\n}\n\n// RecipeListItem renders a bootstrap list item containing data from the recipe api call\nexport function BookListItem({\n  title,\n                          authors,\n                          href,\n                          description,\n                          thumbnail\n\n}) {\n  return (\n    <li className=\"list-group-item\">\n      <Container>\n        <Row>\n          <Col size=\"xs-4 sm-2\">\n            <Thumbnail src={thumbnail} />\n          </Col>\n          <Col size=\"xs-8 sm-9\">\n            <h3>{title}</h3>\n            <h3>{authors}</h3>\n            <p>Description: {description}</p>\n            <a rel=\"noreferrer noopener\" target=\"_blank\" href={href}>\n              Go to the book preview!\n            </a>\n          </Col>\n        </Row>\n      </Container>\n    </li>\n  );\n}\n","import React from \"react\";\n\n// Destructuring the type, className, children and onClick props, applying them to the button element\nfunction Button({ type = \"default\", className, children, onClick }) {\n  return (\n    <button onClick={onClick} className={[\"btn btn-lg\", `btn-${type}`, className].join(\" \")}>\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\n\n// This component lets us use a bootstrap input element without worrying about class names\n// or manually wrapping the input with a form-group div\n// All of the props passed to this component are spread onto the input element\nfunction Input(props) {\n  return (\n    <div className=\"input-group input-group-lg\">\n      <input className=\"form-control\" type=\"text\" {...props} />\n    </div>\n  );\n}\n\nexport default Input;\n","import React , {Component} from \"react\"\nimport api from \"../Utils/api\"\nimport { BookList, BookListItem } from \"../components/Booklist\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport Button from \"../components/Button\";\nimport Input from \"../components/Input\";\n\nclass Search extends Component{\n     state = {\n         apiResults: [],\n         search: \"\",\n         apiKey: `${process.env.REACT_APP_BOOKS_KEY}`\n     };\n\n     handleInputChange = event => {\n        // Destructure the name and value properties off of event.target\n        // Update the appropriate state\n        const { name, value } = event.target;\n        this.setState({\n          [name]: value\n        });\n      };\n    \n      handleFormSubmit = event => {\n        // When the form is submitted, prevent its default behavior, get books update the books state\n        event.preventDefault();\n        api.getGooglebooks(this.state.search, this.state.apiKey)\n          .then(res => { \n            // console.log(JSON.stringify(res.data));\n             \n            const searchBooks = []\n            for (var i=0; i < res.data.items.length; i++) {\n                searchBooks.push(\n                  { title: res.data.items[i].volumeInfo.title,\n                    description: res.data.items[i].volumeInfo.description,\n                    image: res.data.items[i].volumeInfo.imageLinks.thumbnail,\n                    link: res.data.items[i].volumeInfo.infoLink,\n                    authors: res.data.items[i].volumeInfo.authors\n                  })\n              }\n              // console.log(JSON.stringify(searchBooks));\n            this.setState({ apiResults: searchBooks })})\n          .catch(err => console.log(err));\n      };\n    \n\n\n    render() {\n        return(\n            <Container>\n            <Row>\n              <Col size=\"md-12\">\n                <form>\n                  <Container>\n                    <Row>\n                      <Col size=\"xs-9 sm-10\">\n                        <Input\n                          name=\"search\"\n                          value={this.state.search}\n                          onChange={this.handleInputChange}\n                          placeholder=\"Search For a Book\"\n                        />\n                      </Col>\n                      <Col size=\"xs-3 sm-2\">\n                        <Button\n                          onClick={this.handleFormSubmit}\n                          type=\"success\"\n                          className=\"input-lg\"\n                        >\n                          Search\n                        </Button>\n                      </Col>\n                    </Row>\n                  </Container>\n                </form>\n              </Col>\n            </Row>\n            <Row>\n              <Col size=\"xs-12\">\n                {!this.state.apiResults.length ? (\n                  <h1 className=\"text-center\">No Books to Display</h1>\n                ) : (\n                  <BookList>\n                    {this.state.apiResults.map((book, index) => {\n                      return (\n                        <BookListItem\n                          key={index}\n                          title={book.title}\n                          authors={book.authors}\n                          href={book.link}\n                          description={book.description}\n                          thumbnail={book.image}\n                        />\n                      );\n                    })}\n                  </BookList>\n                )}\n              </Col>\n            </Row>\n          </Container>\n        )\n    }\n}\n\nexport default Search","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Search from \"./pages/search\"\nfunction App() {\n  return (\n     <Router>\n       <Route exact path = \"/\">\n        <Search></Search>\n       </Route>\n     </Router>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}